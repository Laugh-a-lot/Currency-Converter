{"version":3,"sources":["axios.js","components/TableRow.js","components/CurrencySelector.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["instance","process","API_KEY","axios","create","baseURL","TableRow","props","data-label","sno","country","rate","currency","CurrencySelector","className","aria-label","onChange","setbase","defaultValue","value","Table","useState","rates","setRates","amount","setAmount","currencies","EUR","GBP","USD","INR","CAD","JPY","CNY","BRL","baseCurrency","setBase","useEffect","a","get","request","data","conversion_rates","fetchData","select","e","target","toFixed","action","onSubmit","event","preventDefault","type","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc35e829.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst api_key = process.env.API_KEY\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://v6.exchangerate-api.com/v6/b84efd22b9f9dd9c98ecb843/latest/EUR`\r\n})\r\n\r\nexport default instance;","import React from \"react\";\r\nimport \"./Table.css\"\r\n\r\nfunction TableRow(props) {\r\n  return (\r\n      <tr>\r\n        <td data-label=\"s. no.\">{props.sno}</td>\r\n        <td data-label=\"country name\">{props.country}</td>\r\n      <td data-label=\"rate\">{props.rate}</td>\r\n      <td data-label=\"currency\">{props.currency}</td>\r\n      </tr>\r\n  );\r\n}\r\n\r\nexport default TableRow;\r\n","import React from 'react'\r\n\r\nfunction CurrencySelector(props) {\r\n    \r\n    return (\r\n        <div>\r\n            <select className=\"form-select\" aria-label=\"Default select example\" onChange={props.setbase}>\r\n            <option defaultValue=\"USD\">USD</option>\r\n            <option value=\"EUR\">EUR</option>\r\n            <option value=\"INR\">INR</option>\r\n            <option value=\"GBP\">GBP</option>\r\n            <option value=\"CNY\">CNY</option>\r\n            <option value=\"JPY\">EUR</option>\r\n            <option value=\"BRL\">BRL</option>\r\n                <option value=\"CAD\">CAD</option>\r\n                </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrencySelector\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Table.css\";\r\nimport axios from \"../axios\";\r\nimport TR from \"./TableRow\";\r\nimport CurrencySelector from \"./CurrencySelector\";\r\n\r\nfunction Table() {\r\n  const [rates, setRates] = useState([]);\r\n\r\n  const [amount, setAmount] = useState(1);\r\n\r\n  const currencies = {\r\n    EUR: 1.00,\r\n    GBP: rates.GBP,\r\n    USD: rates.USD,\r\n    INR: rates.INR,\r\n    CAD: rates.CAD,\r\n    JPY: rates.JPY,\r\n    CNY: rates.CNY,\r\n    BRL: rates.BRL,\r\n  };\r\n  const [baseCurrency, setBase] = useState();\r\n\r\n  const handleBaseCurrency = (e) => {\r\n    setBase(currencies[e.target.value]);\r\n  };\r\n  const handleConversion = (event) => {\r\n    event.preventDefault();\r\n    setAmount(event.target[0].value > 0 ? event.target[0].value : 1  );\r\n    setBase(currencies[event.target[1].value]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get();\r\n      setRates(request.data.conversion_rates);\r\n      setBase(request.data.conversion_rates.USD);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h2 className=\"text-center pb-2 mb-2\">Currency Rate</h2>\r\n        <div className=\"selectBase\">\r\n          <h4 className=\"spacing\">Base Currency</h4>\r\n          <CurrencySelector select={setBase} setbase={handleBaseCurrency} />\r\n        </div>\r\n\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table table-dark table-hover bg-color\">\r\n            <thead>\r\n              <tr>\r\n                <th>S.No.</th>\r\n                <th>Country Name</th>\r\n                <th>Rate</th>\r\n                <th>Currency</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <TR\r\n                sno={1}\r\n                country={\"United States\"}\r\n                rate={((currencies[\"USD\"] * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"USD\"}\r\n              />\r\n              <TR\r\n                sno={2}\r\n                country={\"China\"}\r\n                rate={((rates.CNY * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"CNY\"}\r\n              />\r\n              <TR\r\n                sno={3}\r\n                country={\"Japan\"}\r\n                rate={((rates.JPY * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"JPY\"}\r\n              />\r\n              <TR\r\n                sno={4}\r\n                country={\"Germany\"}\r\n                rate={((currencies[\"EUR\"] * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"EUR\"}\r\n              />\r\n              <TR\r\n                sno={5}\r\n                country={\"India\"}\r\n                rate={((rates.INR * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"INR\"}\r\n              />\r\n              <TR\r\n                sno={6}\r\n                country={\"United Kingdom\"}\r\n                rate={((rates.GBP * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"GBP\"}\r\n              />\r\n              <TR\r\n                sno={7}\r\n                country={\"France\"}\r\n                rate={((currencies[\"EUR\"] * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"EUR\"}\r\n              />\r\n              <TR\r\n                sno={8}\r\n                country={\"Italy\"}\r\n                rate={((currencies[\"EUR\"] * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"EUR\"}\r\n              />\r\n              <TR\r\n                sno={9}\r\n                country={\"Brazil\"}\r\n                rate={((rates.BRL * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"BRL\"}\r\n              />\r\n              <TR\r\n                sno={10}\r\n                country={\"Canada\"}\r\n                rate={((rates.CAD * amount) / baseCurrency).toFixed(2)}\r\n                currency={\"CAD\"}\r\n              />\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <form action=\"\" className=\"convert\" onSubmit={handleConversion}>\r\n          <h3>Enter an amount:</h3>\r\n          <input\r\n            className=\"form-control-s\"\r\n            type=\"text\"\r\n            placeholder=\"0\"\r\n            aria-label=\"amount\"\r\n          ></input>\r\n          <h3>Enter the currency:</h3>\r\n          <CurrencySelector />\r\n          <button type=\"submit\" className=\"btn btn-primary btn-pos btn-sm\">\r\n            Convert\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import \"bootstrap/dist/css/bootstrap.css\"\nimport './App.css';\nimport Table from './components/Table'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}